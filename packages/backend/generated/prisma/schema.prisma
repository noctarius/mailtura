generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  moduleFormat    = "esm"
  runtime         = "bun"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
  extensions   = []
}

model tenants {
  id         String    @id @default(dbgenerated("uuidv7()")) @db.Uuid
  name       String
  created_at DateTime  @db.Timestamptz()
  created_by String
  updated_at DateTime? @db.Timestamptz()
  updated_by String?
}

model contacts {
  id               String    @id @default(dbgenerated("uuidv7()")) @db.Uuid
  tenant_id        String    @db.Uuid
  email            String
  first_name       String?
  last_name        String?
  last_activity_at DateTime? @db.Timestamptz()
  created_at       DateTime  @db.Timestamptz()
  created_by       String
  updated_at       DateTime? @db.Timestamptz()
  updated_by       String?

  activities   activities[]
  bounces      bounces[]
  subscribers  subscribers[]
  unsubscribes unsubscribes[]

  @@unique([tenant_id, email])
}

enum campaign_status {
  Active
  Scheduled
  Completed
  Draft
  Paused
  Cancelled
}

enum campaign_type {
  OneTime
  Automated
}

model campaigns {
  id            String          @id @default(dbgenerated("uuidv7()")) @db.Uuid
  tenant_id     String          @db.Uuid
  name          String
  status        campaign_status
  type          campaign_type
  recipients    Int
  sent          Int
  delivered     Int
  scheduled_for DateTime?       @db.Timestamptz()
  created_at    DateTime        @db.Timestamptz()
  created_by    String
  updated_at    DateTime?       @db.Timestamptz()
  updated_by    String?

  activities activities[]

  @@unique([tenant_id, name])
}

enum activity_status {
  Delivered
  Opened
  Clicked
  Pending
  Scheduled
  Bounced
  Failed
}

enum event_type {
  Queued
  Delivered
  Clicked
  Opened
  Failed
  Bounced
}

model activities {
  id                     String          @id @default(dbgenerated("uuidv7()")) @db.Uuid
  tenant_id              String          @db.Uuid
  send_name              String
  subject                String
  status                 activity_status
  sent_at                DateTime        @db.Timestamptz()
  last_event_received_at DateTime        @db.Timestamptz()
  last_event_type        event_type
  opens                  Int
  clicks                 Int
  campaign_id            String?         @db.Uuid
  contact_id             String          @db.Uuid
  created_at             DateTime        @db.Timestamptz()
  created_by             String
  updated_at             DateTime?       @db.Timestamptz()
  updated_by             String?

  receivers contacts   @relation(fields: [contact_id], references: [id])
  campaigns campaigns? @relation(fields: [campaign_id], references: [id])

  @@index([tenant_id, contact_id, campaign_id])
}

enum bounce_type {
  Hard
  Soft
}

model bounces {
  id          String      @id @default(dbgenerated("uuidv7()")) @db.Uuid
  tenant_id   String      @db.Uuid
  bounced_at  DateTime    @db.Timestamptz()
  reason      String
  bounce_type bounce_type
  contact_id  String      @db.Uuid
  created_at  DateTime    @db.Timestamptz()
  created_by  String
  updated_at  DateTime?   @db.Timestamptz()
  updated_by  String?

  contacts contacts @relation(fields: [contact_id], references: [id])

  @@unique([tenant_id, contact_id])
}

enum subscriber_status {
  Subscribed
  Unsubscribed
  Bounced
  Complaint
}

model subscribers {
  id                 String            @id @default(dbgenerated("uuidv7()")) @db.Uuid
  tenant_id          String            @db.Uuid
  status             subscriber_status
  subscribed_at      DateTime          @db.Timestamptz()
  subscriber_list_id String            @db.Uuid
  contact_id         String            @db.Uuid
  created_at         DateTime          @db.Timestamptz()
  created_by         String
  updated_at         DateTime?         @db.Timestamptz()
  updated_by         String?

  contacts         contacts         @relation(fields: [contact_id], references: [id])
  subscriber_lists subscriber_lists @relation(fields: [subscriber_list_id], references: [id])

  @@unique([tenant_id, contact_id, subscriber_list_id])
}

model subscriber_lists {
  id          String    @id @default(dbgenerated("uuidv7()")) @db.Uuid
  tenant_id   String    @db.Uuid
  name        String
  description String?
  created_at  DateTime  @db.Timestamptz()
  created_by  String
  updated_at  DateTime? @db.Timestamptz()
  updated_by  String?

  subscribers subscribers[]

  @@unique([tenant_id, name])
}

enum unsubscribe_source {
  UnsubscribeLink
  ManualAddition
  Bounce
  Api
  Other
}

model unsubscribes {
  id              String             @id @default(dbgenerated("uuidv7()")) @db.Uuid
  tenant_id       String             @db.Uuid
  source          unsubscribe_source
  unsubscribed_at DateTime           @db.Timestamptz()
  global          Boolean
  list_ids        String[]           @db.Uuid
  contact_id      String             @db.Uuid
  created_at      DateTime           @db.Timestamptz()
  created_by      String
  updated_at      DateTime?          @db.Timestamptz()
  updated_by      String?

  contacts contacts @relation(fields: [contact_id], references: [id])

  @@unique([tenant_id, contact_id])
}

model users {
  id            String    @id @default(dbgenerated("uuidv7()")) @db.Uuid
  tenant_id     String    @db.Uuid
  email         String
  first_name    String?
  last_name     String?
  role          String
  is_active     Boolean
  last_login_at DateTime? @db.Timestamptz()
  permissions   String[]
  created_at    DateTime  @db.Timestamptz()
  created_by    String
  updated_at    DateTime? @db.Timestamptz()
  updated_by    String?
}

model api_keys {
  id           String    @id @default(dbgenerated("uuidv7()")) @db.Uuid
  tenant_id    String    @db.Uuid
  name         String
  key          String
  is_active    Boolean
  last_used_at DateTime? @db.Timestamptz()
  expires_at   DateTime? @db.Timestamptz()
  permissions  String[]
  created_at   DateTime  @db.Timestamptz()
  created_by   String
  updated_at   DateTime? @db.Timestamptz()
  updated_by   String?
}

model template_properties {
  id            String  @id @default(dbgenerated("uuidv7()")) @db.Uuid
  tenant_id     String  @db.Uuid
  templates_id  String? @db.Uuid
  name          String
  type          String
  default_value Json

  templates templates? @relation(fields: [templates_id], references: [id])
}

model templates {
  id          String                @id @default(dbgenerated("uuidv7()")) @db.Uuid
  tenant_id   String                @db.Uuid
  name        String
  description String?
  content     String
  properties  template_properties[]
  created_at  DateTime              @db.Timestamptz()
  created_by  String
  updated_at  DateTime?             @db.Timestamptz()
  updated_by  String?
}

model contact_imports {
  id         String    @id @default(dbgenerated("uuidv7()")) @db.Uuid
  tenant_id  String    @db.Uuid
  name       String?
  filename   String
  status     Float
  records    Int
  finished   Boolean
  created_at DateTime  @db.Timestamptz()
  created_by String
  updated_at DateTime? @db.Timestamptz()
  updated_by String?
}
